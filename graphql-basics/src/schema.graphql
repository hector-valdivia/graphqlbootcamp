type Query {
    users(query: String): [User!]!,
    posts(query: String): [Post!]!,
    me: User!,
    comments(post: String, user: String): [Comment!]!
}

type Mutation {
    createUser(data: CreateUserInput): User!,
    deleteUser(id: ID!): User!
    updateUser(id: ID!, data: UpdateUserInput): User!
    
    createPost(data: CreatePostInput): Post!
    deletePost(id:ID!): Post!
    updatePost(id:ID!, data: UpdatePostInput): Post!
    
    createComment(data: CreateCommentInput): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput): Comment!
}

type Subscription {
    count: Int!
    comment(postID: ID!): Comment!
    post(postID: ID!): Post!
}

#U S E R S
input CreateUserInput {
    name: String!
    email: String!
    age: Int
}

input UpdateUserInput {
    name: String
    email: String
    age: Int
}

#P O S T
input CreatePostInput {
    title: String!, 
    body: String!, 
    published: Boolean!, 
    author: ID!
}

input UpdatePostInput {
    title: String, 
    body: String, 
    published: Boolean, 
    author: ID
}

#C O M M E N T
input CreateCommentInput {
    text: String!, 
    author: ID!, 
    post: ID!
}

input UpdateCommentInput {
    text: String, 
    author: ID,
    post: ID
}

type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}